<resources>
    <string name="alloc">Allocated\nResources</string>
    <string name="intro">Team - 24\nMeet Sheladiya\t\t\t\t\t - 19BIT076\nRenish Jagani\t\t\t\t\t\t - 19BIT108\nVivek Devre\t\t\t\t\t\t\t\t\t - 19BIT131\nAnanya Khandelwal\t - 19BIT144</string>
    <string name="need">Maximum\nNeed</string>
    <string name="pro">Process\nName</string>
    <string name="app_name">OS Lab</string>
    <string name="banker_theory">"The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety by simulating the allocation for predetermined maximum possible amounts of all resources, then makes an “s-state” check to test for possible activities, before deciding whether allocation should be allowed to continue.\n\nThe algorithm was developed in the design process for the the operating system and originally described (in Dutch) in EWD108. When a new process enters a system, it must declare the maximum number of instances of each resource type that it may ever claim; clearly, that number may not exceed the total number of resources in the system. Also, when a process gets all its requested resources it must return them in a finite amount of time.\nBanker’s algorithm is named so because it is used in banking system to check whether loan can be sanctioned to a person or not. Suppose there are n number of account holders in a bank and the total sum of their money is S. If a person applies for a loan then the bank first subtracts the loan amount from the total money that bank has and if the remaining amount is greater than S then only the loan is sanctioned. It is done because if all the account holders comes to withdraw their money then the bank can easily do it.\n\nIn other words, the bank would never allocate its money in such a way that it can no longer satisfy the needs of all its customers. The bank would try to be in safe state always.</string>
    <string name="lock_theory">"A lock variable provides the simplest synchronization mechanism for processes. It's a software mechanism implemented in user mode, i.e. no support required from the Operating System. It's a busy waiting solution (keeps the CPU busy even when it's technically waiting). It can be used for more than two processes.\n\nWhen Lock = 0 implies the critical section is vacant (initial value ) and Lock = 1 implies critical section occupied.</string>
    <string name="ostrich_theory">"In computer science, the ostrich algorithm is a strategy of ignoring potential problems on the basis that they may be exceedingly rare. It is named for the ostrich effect which is defined as \"to stick one's head in the sand and pretend there is no problem\". This is a very risky algorithm.</string>
    <string name="binary_theory">"The binary semaphores are like counting semaphores but their value is restricted to 0 and 1. The wait operation only works when the semaphore is 1 and the signal operation succeeds when semaphore is 0. We have a simple interface. Click in add process to add process in the system. Click on the process to move it forward. Red light will turn on below the respective column. If the laws permit you will successfully complete the task. It wont move if it is not feasible. The other button on bottom right will reset the system to start over.</string>
    <string name="counting_theory">"The value of counting semaphore at any point of time indicates the maximum number of processes that can enter in the critical section at the same time. A process which wants to enter in the critical section first decreases the semaphore value by 1 and then checks whether it gets negative or not. We have a simple interface. Click on the X value button to enter the value of Counting Semaphore. Same button is used to reset the system to start over. Click in add process to add process in the system. Click on the process to move it forward. Red light will turn on below the respective column. If the laws permit you will successfully complete the task. It wont move if it is not feasible.</string>
    <string name="ostrich">"1. On Clicking the Warning Button, a basic DEADLOCK of 2 resource and 2 process occur.\n\n2. The process prints a predefined statement untill the deadlock is resolved.\n\n3. To resolve this DEADLOCK, restart the app.\n\nThis will hang your device. If you want to risk that press the below button"</string>
    <string name="arrival_time">Arrival\nTime</string>
    <string name="burst_time">Burst\nTime</string>
    <string name="TAT_time">Turnaround\nTime</string>
    <string name="waiting_time">Waiting\nTime</string>
    <string name="completion_time">Completion\nTime</string>
    <string name="sr_no">Serial \nNo </string>
    <string name="process">Process\nName</string>
    <string name="add_process">ADD</string>
    <string name="delete_process">DELETE</string>
    <string name="reset">Reset</string>
    <string name="gantt_chart"><u>GANTT CHART</u>:</string>
    <string name="output"><u>OUTPUT</u>:</string>
    <string name="pre_emtive">Pre-emtive</string>
    <string name="non_pre_emtive">Non Pre-emtive</string>
    <string name="enter_time_quantum">Enter Time Quantum</string>
    <string name="title_activity_dashboard">DashboardActivity</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>
    <string name="label">CONCURRENCY AND DEADLOCK</string>
    <string name="hello_first_fragment">Hello first fragment</string>
    <string name="hello_second_fragment">Hello second fragment. Arg: %1$s</string>

    <string name="text_hit">HITS: %d</string>
    <string name="text_fault">FAULTS: %d</string>
    <string name="text_miss_ration">MISS RATIO: %f</string>
    <string name="text_hit_ration">HIT RATIO: %f</string>
    <string name="text_pages">PAGES: %d</string>
    <string name="text_frames">FRAMES: %d</string>
    <string name="allow_digit_for_reference">0123456789,</string>
    <string name="error_enter_valid_reference_numbers">Invalid Reference Number (eg:1,2,3,4,5....)</string>
    <string name="error_enter_valid_frame">Invalid Input</string>
    <string name="edit_text_hint_frames">Frames</string>
    <string name="edit_text_hint_ref_number">Reference Number</string>
    <string name="text_btn_submit">SUBMIT</string>
    <string name="text_output">OUTPUT:</string>
    <string name="splash_scren_aap_name">Operating System \nVirtual Lab \nTeam-24</string>
    <string name="al1">Banker</string>

</resources>